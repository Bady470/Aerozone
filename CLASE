###############################################################
# 🚀 CONFIGURACIÓN INICIAL DE GIT
###############################################################

# 1️⃣ Verifica que Git esté instalado
git --version

# 2️⃣ Configura tu nombre y correo globalmente
git config --global user.name "Tu Nombre"
git config --global user.email "tuemail@ejemplo.com"

# 3️⃣ Revisa la configuración actual
git config --global --list

###############################################################
# 🔑 CREAR UNA LLAVE SSH
###############################################################

# 4️⃣ Verifica si ya tienes llaves SSH
ls -al ~/.ssh

# 5️⃣ Genera una nueva llave SSH
ssh-keygen -t ed25519 -C "tuemail@ejemplo.com"

# Presiona ENTER para aceptar la ruta por defecto (~/.ssh/id_ed25519)
# Opcional: agrega una frase de seguridad

# 6️⃣ Inicia el ssh-agent
eval "$(ssh-agent -s)"

# 7️⃣ Agrega la nueva llave SSH
ssh-add ~/.ssh/id_ed25519

# 8️⃣ Muestra la llave pública para agregarla en GitHub/GitLab
cat ~/.ssh/id_ed25519.pub

###############################################################
# 🌱 INICIALIZAR UN REPOSITORIO GIT
###############################################################

# 9️⃣ Crea una nueva carpeta y entra en ella
mkdir mi-proyecto
cd mi-proyecto

# 🔟 Inicializa un repositorio Git
git init

# 1️⃣1️⃣ Crea un archivo README.md
echo "# Mi proyecto" > README.md

# 1️⃣2️⃣ Agrega los archivos al área de staging
git add README.md

# 1️⃣3️⃣ Haz tu primer commit
git commit -m "Primer commit"

# (Opcional) Agrega un repositorio remoto y sube los cambios
# git remote add origin git@github.com:usuario/repositorio.git
# git push -u origin master

###############################################################
# 📜 TRABAJO BÁSICO CON GIT
###############################################################

# 🔎 Ver el historial de cambios
git log
git log --oneline --graph --decorate --all

# 🔎 Ver diferencias entre commits
git diff               # Cambios aún no preparados (unstaged)
git diff --staged      # Cambios ya preparados (staged)
git diff commit1 commit2  # Comparar dos commits

# 🚫 Ignorar archivos (crea el archivo .gitignore y edítalo)
echo "node_modules/" >> .gitignore
echo ".env" >> .gitignore
echo "*.log" >> .gitignore

# ↩️ Deshacer cambios
git checkout -- archivo.txt      # Deshacer cambios en un archivo
git reset --hard commit_hash     # Volver al commit especificado (peligroso si ya está en remoto)
git revert commit_hash           # Crear un nuevo commit que revierte uno anterior (seguro)

###############################################################
# 🌳 RAMAS (BRANCHES)
###############################################################

# 🔎 Ver las ramas disponibles
git branch

# 🌱 Crear una nueva rama
git branch nombre-rama

# 🌱 Cambiar a otra rama
git checkout nombre-rama

# 🌱 Crear y cambiar a la vez
git checkout -b nombre-rama

# 🔀 Fusionar ramas (merge)
git checkout main
git merge nombre-rama

# ⚠️ Resolver conflictos (si aparecen >>>>> y <<<<<< en los archivos)
# Edita los archivos y luego:
git add archivo.txt
git commit

###############################################################
# 🎉 ¡TODO LISTO PARA EMPEZAR A TRABAJAR CON GIT! 🎉
###############################################################
